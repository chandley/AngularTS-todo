var ToDos;!function(o){var t=["ui.router","todos.root","todos.main"];o.appModule=angular.module("todos",t),o.appModule.config(["$stateProvider","$urlRouterProvider",function(o,t){o.state({name:"root",url:"/",templateUrl:"root/root.html",controller:"RootController",controllerAs:"rootCtrl"}),t.otherwise("/")}])}(ToDos||(ToDos={}));var ToDos;!function(o){o.rootModule=angular.module("todos.root",[])}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(){this.messages=["Welcome","New version is out"],this.showMessages=!0}return o.prototype.toggleMessages=function(){this.showMessages=!this.showMessages},o}();o.rootModule.controller("RootController",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=["ui.router","ui.bootstrap"];o.todosModule=angular.module("todos.main",t),o.todosModule.config(["$stateProvider",function(o){o.state({name:"root.todos",url:"todos",templateUrl:"/todos/list.html",controller:"ListController",controllerAs:"listCtrl"})}])}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o,t){this.todoService=o,this.$modalInstance=t}return o.$inject=["todoService","$modalInstance"],o.prototype.save=function(){var o=this,t={id:Date.now().toString(),text:this.text,created:moment().toISOString()};this.todoService.add(t).then(function(){o.$modalInstance.close()})},o}();o.todosModule.controller("AddNewController",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o,t,e){var r=this;this.todoService=o,this.$window=t,this.$modal=e,o.list().then(function(o){r.todos=o})["catch"](function(o){t.console.log(o)})}return o.$inject=["todoService","$window","$modal"],o.prototype.addNew=function(){this.$modal.open({controller:"AddNewController",controllerAs:"addNewCtrl",templateUrl:"/todos/addnew.html",backdrop:"static"})},o}();o.todosModule.controller("ListController",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o){this.$http=o}return o.$inject=["$http"],o.prototype.list=function(){return this.$http.get("/api/todos").then(function(o){return o.data})},o.prototype.add=function(o){return this.$http.post("/api/todos",o).then(function(o){return o.data})},o}();o.ToDoService=t,o.todosModule.service("todoService",t)}(ToDos||(ToDos={}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyIsInJvb3QvbW9kdWxlLnRzIiwicm9vdC9Sb290Q29udHJvbGxlci50cyIsInRvZG9zL21vZHVsZS50cyIsInRvZG9zL0FkZE5ld0NvbnRyb2xsZXIudHMiLCJhcHAuanMiLCJ0b2Rvcy9MaXN0Q29udHJvbGxlci50cyIsInRvZG9zL1RvRG9TZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIlRvRG9zIiwiVG9Eb3MuUm9vdENvbnRyb2xsZXIiLCJUb0Rvcy5Sb290Q29udHJvbGxlci5jb25zdHJ1Y3RvciIsIlRvRG9zLlJvb3RDb250cm9sbGVyLnRvZ2dsZU1lc3NhZ2VzIiwiVG9Eb3MuQWRkTmV3Q29udHJvbGxlciIsIlRvRG9zLkFkZE5ld0NvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJBZGROZXdDb250cm9sbGVyIiwiJGluamVjdCIsIlRvRG9zLkFkZE5ld0NvbnRyb2xsZXIuc2F2ZSIsIlRvRG9zLkxpc3RDb250cm9sbGVyIiwiVG9Eb3MuTGlzdENvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJMaXN0Q29udHJvbGxlciIsIlRvRG9zLkxpc3RDb250cm9sbGVyLmFkZE5ldyIsIlRvRG9zLlRvRG9TZXJ2aWNlIiwiVG9Eb3MuVG9Eb1NlcnZpY2UuY29uc3RydWN0b3IiLCJUb0RvU2VydmljZSIsIlRvRG9zLlRvRG9TZXJ2aWNlLmxpc3QiLCJUb0Rvcy5Ub0RvU2VydmljZS5hZGQiXSwibWFwcGluZ3MiOiJBQUlBLEdBQVVBLFFBQVYsU0FBVUEsR0FJTkEsR0FBSUEsSUFDQUEsWUFDQUEsYUFDQUEsYUFFT0EsR0FBQUEsVUFBWUEsUUFBUUEsT0FBT0EsUUFBU0EsR0FFL0NBLEVBQUFBLFVBQVVBLFFBQUFBLGlCQUFBQSxxQkFDTkEsU0FBQ0EsRUFDREEsR0FFQUEsRUFDS0EsT0FDR0EsS0FBTUEsT0FDTkEsSUFBS0EsSUFDTEEsWUFBYUEsaUJBQ2JBLFdBQVlBLGlCQUNaQSxhQUFjQSxhQUdsQkEsRUFBbUJBLFVBQVVBLFNBeEIvQkEsUUFBQUEsVUNBVixJQUFVQSxRQUFWLFNBQVVBLEdBRUtBLEVBQUFBLFdBQWFBLFFBQVFBLE9BQU9BLGtCQUZqQ0EsUUFBQUEsVUNDVixJQUFVQSxRQUFWLFNBQVVBLEdBRU5BLEdBQUFBLEdBQUFBLFdBQUFDLFFBQUFBLEtBQ1dDLEtBQUFBLFVBQ0hBLFVBQ0FBLHNCQUdHQSxLQUFBQSxjQUFlQSxFQUkxQkQsTUFIV0EsR0FBQUEsVUFBQUEsZUFBUEEsV0FDSUUsS0FBS0EsY0FBZ0JBLEtBQUtBLGNBRWxDRixJQUVBRCxHQUFBQSxXQUFXQSxXQUFXQSxpQkFBa0JBLElBZGxDQSxRQUFBQSxVQ0RWLElBQVVBLFFBQVYsU0FBVUEsR0FFTkEsR0FBSUEsSUFDQUEsWUFDQUEsZUFHT0EsR0FBQUEsWUFBY0EsUUFBUUEsT0FBT0EsYUFBY0EsR0FFdERBLEVBQUFBLFlBQVlBLFFBQUFBLGlCQUFPQSxTQUFDQSxHQUVoQkEsRUFBZUEsT0FDWEEsS0FBTUEsYUFDTkEsSUFBS0EsUUFDTEEsWUFBYUEsbUJBQ2JBLFdBQVlBLGlCQUNaQSxhQUFjQSxpQkFoQmhCQSxRQUFBQSxVQ0hWLElBQVVBLFFBQVYsU0FBVUEsR0FDTkEsR0FBQUEsR0FBQUEsV0FFSUksUUFBQUEsR0FBb0JBLEVBQ0FBLEdBREFDLEtBQUFBLFlBQUFBLEVBQ0FBLEtBQUFBLGVBQUFBLEVBYXhCRCxNQ2lFSUUsR0FBaUJDLFNBQVcsY0FBZSxrQkQ1RXBDSCxFQUFBQSxVQUFBQSxLQUFQQSxXQUFBSSxHQUFBQSxHQUFBQSxLQUNRQSxHQUNBQSxHQUFJQSxLQUFLQSxNQUFNQSxXQUNmQSxLQUFNQSxLQUFLQSxLQUNYQSxRQUFTQSxTQUFTQSxjQUV0QkEsTUFBS0EsWUFBWUEsSUFBSUEsR0FDaEJBLEtBQUtBLFdBQ0ZBLEVBQUtBLGVBQWVBLFdBR3BDSixJQUNBSixHQUFBQSxZQUFZQSxXQUFXQSxtQkFBb0JBLElBbEJyQ0EsUUFBQUEsVUVDVixJQUFVQSxRQUFWLFNBQVVBLEdBV05BLEdBQUFBLEdBQUFBLFdBR0lTLFFBQUFBLEdBQW9CQSxFQUNBQSxFQUNBQSxHQUx4QkMsR0FBQUEsR0FBQUEsSUFHd0JBLE1BQUFBLFlBQUFBLEVBQ0FBLEtBQUFBLFFBQUFBLEVBQ0FBLEtBQUFBLE9BQUFBLEVBRWhCQSxFQUFZQSxPQUNQQSxLQUFLQSxTQUFDQSxHQUNIQSxFQUFLQSxNQUFRQSxJQUZyQkEsU0FJV0EsU0FBQ0EsR0FDSkEsRUFBUUEsUUFBUUEsSUFBSUEsS0FhcENELE1EZ0ZJRSxHQUFlSixTQUFXLGNBQWUsVUFBVyxVQ3hGN0NFLEVBQUFBLFVBQUFBLE9BQVBBLFdBQ0lHLEtBQUtBLE9BQU9BLE1BQ1JBLFdBQVlBLG1CQUNaQSxhQUFjQSxhQUNkQSxZQUFhQSxxQkFDYkEsU0FBVUEsWUFHdEJILElBRUFULEdBQUFBLFlBQVlBLFdBQVdBLGlCQUFrQkEsSUF0Q25DQSxRQUFBQSxVQ0FWLElBQVVBLFFBQVYsU0FBVUEsR0FFTkEsR0FBQUEsR0FBQUEsV0FFSWEsUUFBQUEsR0FBb0JBLEdBQUFDLEtBQUFBLE1BQUFBLEVBZ0J4QkQsTUZxSElFLEdBQVlSLFNBQVcsU0VqSWhCTSxFQUFBQSxVQUFBQSxLQUFQQSxXQUVJRyxNQUFPQSxNQUFLQSxNQUFNQSxJQUFZQSxjQUMxQkEsS0FBS0EsU0FBQ0EsR0FDRkEsTUFBT0EsR0FBU0EsUUFJckJILEVBQUFBLFVBQUFBLElBQVBBLFNBQVdBLEdBQ1BJLE1BQU9BLE1BQUtBLE1BQU1BLEtBQUtBLGFBQWNBLEdBQ3BDQSxLQUFLQSxTQUFDQSxHQUFhQSxNQUFBQSxHQUFTQSxRQUVyQ0osSUFsQmFiLEdBQUFBLFlBQVdBLEVBb0J4QkEsRUFBQUEsWUFBWUEsUUFBUUEsY0FBZUEsSUF0QjdCQSxRQUFBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgY2hyaXNoYSBvbiAwMy8wOS8xNS5cbiAqL1xuXG5uYW1lc3BhY2UgVG9Eb3Mge1xuXG4gICAgZXhwb3J0IHR5cGUgTW9kYWxTZXJ2aWNlID0gYW5ndWxhci51aS5ib290c3RyYXAuSU1vZGFsU2VydmljZTtcblxuICAgIHZhciBkZXBzID0gW1xuICAgICAgICBcInVpLnJvdXRlclwiLFxuICAgICAgICBcInRvZG9zLnJvb3RcIixcbiAgICAgICAgXCJ0b2Rvcy5tYWluXCJcbiAgICBdXG4gICAgZXhwb3J0IHZhciBhcHBNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZShcInRvZG9zXCIsIGRlcHMpO1xuXG4gICAgYXBwTW9kdWxlLmNvbmZpZyhcbiAgICAgICAgKCRzdGF0ZVByb3ZpZGVyOiBhbmd1bGFyLnVpLklTdGF0ZVByb3ZpZGVyLFxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXI6IGFuZ3VsYXIudWkuSVVybFJvdXRlclByb3ZpZGVyKSA9PiB7XG5cbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSh7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJyb290XCIsXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9cIixcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJyb290L3Jvb3QuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiUm9vdENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwicm9vdEN0cmxcIlxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XG5cbiAgICB9KVxuXG59XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgY2hyaXNoYSBvbiAwMy8wOS8xNS5cbiAqL1xuXG5uYW1lc3BhY2UgVG9Eb3Mge1xuXG4gICAgZXhwb3J0IHZhciByb290TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJ0b2Rvcy5yb290XCIsIFtdKTtcblxufSIsIi8qKlxuICogQ3JlYXRlZCBieSBjaHJpc2hhIG9uIDAzLzA5LzE1LlxuICovXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJtb2R1bGUudHNcIiAvPlxubmFtZXNwYWNlIFRvRG9zIHtcblxuICAgIGNsYXNzIFJvb3RDb250cm9sbGVyIHtcbiAgICAgICAgcHVibGljIG1lc3NhZ2VzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgIFwiV2VsY29tZVwiLFxuICAgICAgICAgICAgXCJOZXcgdmVyc2lvbiBpcyBvdXRcIlxuICAgICAgICBdO1xuXG4gICAgICAgIHB1YmxpYyBzaG93TWVzc2FnZXMgPSB0cnVlO1xuICAgICAgICBwdWJsaWMgdG9nZ2xlTWVzc2FnZXMoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dNZXNzYWdlcyA9ICF0aGlzLnNob3dNZXNzYWdlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJvb3RNb2R1bGUuY29udHJvbGxlcihcIlJvb3RDb250cm9sbGVyXCIsIFJvb3RDb250cm9sbGVyKVxufVxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGNocmlzaGEgb24gMDMvMDkvMTUuXG4gKi9cblxubmFtZXNwYWNlIFRvRG9zIHtcblxuICAgIHZhciBkZXBzID0gW1xuICAgICAgICBcInVpLnJvdXRlclwiLFxuICAgICAgICBcInVpLmJvb3RzdHJhcFwiXG4gICAgXVxuXG4gICAgZXhwb3J0IHZhciB0b2Rvc01vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKFwidG9kb3MubWFpblwiLCBkZXBzKTtcblxuICAgIHRvZG9zTW9kdWxlLmNvbmZpZygoJHN0YXRlUHJvdmlkZXI6IGFuZ3VsYXIudWkuSVN0YXRlUHJvdmlkZXIpID0+IHtcblxuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSh7XG4gICAgICAgICAgICBuYW1lOiBcInJvb3QudG9kb3NcIixcbiAgICAgICAgICAgIHVybDogXCJ0b2Rvc1wiLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiL3RvZG9zL2xpc3QuaHRtbFwiLFxuICAgICAgICAgICAgY29udHJvbGxlcjogXCJMaXN0Q29udHJvbGxlclwiLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImxpc3RDdHJsXCJcbiAgICAgICAgfSk7XG4gICAgfSlcblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1vZHVsZS50c1wiIC8+XG5uYW1lc3BhY2UgVG9Eb3Mge1xuICAgIGNsYXNzIEFkZE5ld0NvbnRyb2xsZXIge1xuICAgICAgICBwdWJsaWMgdGV4dDogc3RyaW5nO1xuICAgICAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRvZG9TZXJ2aWNlOiBUb0RvU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSAkbW9kYWxJbnN0YW5jZTogYW5ndWxhci51aS5ib290c3RyYXAuSU1vZGFsU2VydmljZUluc3RhbmNlKSB7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNhdmUoKSB7XG4gICAgICAgICAgICB2YXIgdG9kbyA9IHtcbiAgICAgICAgICAgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dCxcbiAgICAgICAgICAgICAgICBjcmVhdGVkOiBtb21lbnQoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50b2RvU2VydmljZS5hZGQodG9kbylcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJG1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b2Rvc01vZHVsZS5jb250cm9sbGVyKFwiQWRkTmV3Q29udHJvbGxlclwiLCBBZGROZXdDb250cm9sbGVyKTtcbn1cbiIsIi8qKlxuICogQ3JlYXRlZCBieSBjaHJpc2hhIG9uIDAzLzA5LzE1LlxuICovXG52YXIgVG9Eb3M7XG4oZnVuY3Rpb24gKFRvRG9zKSB7XG4gICAgdmFyIGRlcHMgPSBbXG4gICAgICAgIFwidWkucm91dGVyXCIsXG4gICAgICAgIFwidG9kb3Mucm9vdFwiLFxuICAgICAgICBcInRvZG9zLm1haW5cIlxuICAgIF07XG4gICAgVG9Eb3MuYXBwTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJ0b2Rvc1wiLCBkZXBzKTtcbiAgICBUb0Rvcy5hcHBNb2R1bGUuY29uZmlnKGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoe1xuICAgICAgICAgICAgbmFtZTogXCJyb290XCIsXG4gICAgICAgICAgICB1cmw6IFwiL1wiLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwicm9vdC9yb290Lmh0bWxcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiUm9vdENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJyb290Q3RybFwiXG4gICAgICAgIH0pO1xuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL1wiKTtcbiAgICB9KTtcbn0pKFRvRG9zIHx8IChUb0RvcyA9IHt9KSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSBjaHJpc2hhIG9uIDAzLzA5LzE1LlxuICovXG52YXIgVG9Eb3M7XG4oZnVuY3Rpb24gKFRvRG9zKSB7XG4gICAgVG9Eb3Mucm9vdE1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKFwidG9kb3Mucm9vdFwiLCBbXSk7XG59KShUb0RvcyB8fCAoVG9Eb3MgPSB7fSkpO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgY2hyaXNoYSBvbiAwMy8wOS8xNS5cbiAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1vZHVsZS50c1wiIC8+XG52YXIgVG9Eb3M7XG4oZnVuY3Rpb24gKFRvRG9zKSB7XG4gICAgdmFyIFJvb3RDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUm9vdENvbnRyb2xsZXIoKSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0gW1xuICAgICAgICAgICAgICAgIFwiV2VsY29tZVwiLFxuICAgICAgICAgICAgICAgIFwiTmV3IHZlcnNpb24gaXMgb3V0XCJcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB0aGlzLnNob3dNZXNzYWdlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgUm9vdENvbnRyb2xsZXIucHJvdG90eXBlLnRvZ2dsZU1lc3NhZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zaG93TWVzc2FnZXMgPSAhdGhpcy5zaG93TWVzc2FnZXM7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBSb290Q29udHJvbGxlcjtcbiAgICB9KSgpO1xuICAgIFRvRG9zLnJvb3RNb2R1bGUuY29udHJvbGxlcihcIlJvb3RDb250cm9sbGVyXCIsIFJvb3RDb250cm9sbGVyKTtcbn0pKFRvRG9zIHx8IChUb0RvcyA9IHt9KSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSBjaHJpc2hhIG9uIDAzLzA5LzE1LlxuICovXG52YXIgVG9Eb3M7XG4oZnVuY3Rpb24gKFRvRG9zKSB7XG4gICAgdmFyIGRlcHMgPSBbXG4gICAgICAgIFwidWkucm91dGVyXCIsXG4gICAgICAgIFwidWkuYm9vdHN0cmFwXCJcbiAgICBdO1xuICAgIFRvRG9zLnRvZG9zTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJ0b2Rvcy5tYWluXCIsIGRlcHMpO1xuICAgIFRvRG9zLnRvZG9zTW9kdWxlLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoe1xuICAgICAgICAgICAgbmFtZTogXCJyb290LnRvZG9zXCIsXG4gICAgICAgICAgICB1cmw6IFwidG9kb3NcIixcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi90b2Rvcy9saXN0Lmh0bWxcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiTGlzdENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJsaXN0Q3RybFwiXG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoVG9Eb3MgfHwgKFRvRG9zID0ge30pKTtcblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1vZHVsZS50c1wiIC8+XG52YXIgVG9Eb3M7XG4oZnVuY3Rpb24gKFRvRG9zKSB7XG4gICAgdmFyIEFkZE5ld0NvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBBZGROZXdDb250cm9sbGVyKHRvZG9TZXJ2aWNlLCAkbW9kYWxJbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy50b2RvU2VydmljZSA9IHRvZG9TZXJ2aWNlO1xuICAgICAgICAgICAgdGhpcy4kbW9kYWxJbnN0YW5jZSA9ICRtb2RhbEluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgIEFkZE5ld0NvbnRyb2xsZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHRvZG8gPSB7XG4gICAgICAgICAgICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQsXG4gICAgICAgICAgICAgICAgY3JlYXRlZDogbW9tZW50KCkudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudG9kb1NlcnZpY2UuYWRkKHRvZG8pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLiRtb2RhbEluc3RhbmNlLmNsb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEFkZE5ld0NvbnRyb2xsZXI7XG4gICAgfSkoKTtcbiAgICBUb0Rvcy50b2Rvc01vZHVsZS5jb250cm9sbGVyKFwiQWRkTmV3Q29udHJvbGxlclwiLCBBZGROZXdDb250cm9sbGVyKTtcbn0pKFRvRG9zIHx8IChUb0RvcyA9IHt9KSk7XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJtb2R1bGUudHNcIiAvPlxudmFyIFRvRG9zO1xuKGZ1bmN0aW9uIChUb0Rvcykge1xuICAgIHZhciBMaXN0Q29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIExpc3RDb250cm9sbGVyKHRvZG9TZXJ2aWNlLCAkd2luZG93LCAkbW9kYWwpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnRvZG9TZXJ2aWNlID0gdG9kb1NlcnZpY2U7XG4gICAgICAgICAgICB0aGlzLiR3aW5kb3cgPSAkd2luZG93O1xuICAgICAgICAgICAgdGhpcy4kbW9kYWwgPSAkbW9kYWw7XG4gICAgICAgICAgICB0b2RvU2VydmljZS5saXN0KClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodG9kb3MpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy50b2RvcyA9IHRvZG9zO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgJHdpbmRvdy5jb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBMaXN0Q29udHJvbGxlci5wcm90b3R5cGUuYWRkTmV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kbW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJBZGROZXdDb250cm9sbGVyXCIsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImFkZE5ld0N0cmxcIixcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIvdG9kb3MvYWRkbmV3Lmh0bWxcIixcbiAgICAgICAgICAgICAgICBiYWNrZHJvcDogXCJzdGF0aWNcIiAvLyBwcmV2ZW50cyBjbGlja2F3YXkgZnJvbSBjbG9zaW5nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIExpc3RDb250cm9sbGVyO1xuICAgIH0pKCk7XG4gICAgVG9Eb3MudG9kb3NNb2R1bGUuY29udHJvbGxlcihcIkxpc3RDb250cm9sbGVyXCIsIExpc3RDb250cm9sbGVyKTtcbn0pKFRvRG9zIHx8IChUb0RvcyA9IHt9KSk7XG5cbi8vL3JlZmVyZW5jZSBwYXRoPVwibW9kdWxlLnRzXCIgLz5cbnZhciBUb0RvcztcbihmdW5jdGlvbiAoVG9Eb3MpIHtcbiAgICB2YXIgVG9Eb1NlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBUb0RvU2VydmljZSgkaHR0cCkge1xuICAgICAgICAgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICAgICAgICB9XG4gICAgICAgIFRvRG9TZXJ2aWNlLnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGh0dHAuZ2V0KFwiL2FwaS90b2Rvc1wiKS5cbiAgICAgICAgICAgICAgICB0aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFRvRG9TZXJ2aWNlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodG9kbykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGh0dHAucG9zdChcIi9hcGkvdG9kb3NcIiwgdG9kbylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLmRhdGE7IH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVG9Eb1NlcnZpY2U7XG4gICAgfSkoKTtcbiAgICBUb0Rvcy5Ub0RvU2VydmljZSA9IFRvRG9TZXJ2aWNlO1xuICAgIFRvRG9zLnRvZG9zTW9kdWxlLnNlcnZpY2UoXCJ0b2RvU2VydmljZVwiLCBUb0RvU2VydmljZSk7XG59KShUb0RvcyB8fCAoVG9Eb3MgPSB7fSkpO1xuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1vZHVsZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBUb0RvcyB7XG5cbiAgICBpbnRlcmZhY2UgVG9EbyB7XG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgdGFnczogc3RyaW5nW107IC8vIGFjdHVhbGwgZGF0ZXNcbiAgICAgICAgZHVlOiBzdHJpbmc7IC8vIGFjdHVhbGwgZGF0ZVxuICAgICAgICBkb25lOiBzdHJpbmc7IC8vIGFjdHVhbGwgZGF0ZVxuXG4gICAgfVxuXG4gICAgY2xhc3MgTGlzdENvbnRyb2xsZXIge1xuICAgICAgICBwdWJsaWMgdG9kb3M6VG9Eb1tdO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdG9kb1NlcnZpY2U6VG9Eb1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIHByaXZhdGUgJHdpbmRvdzphbmd1bGFyLklXaW5kb3dTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICBwcml2YXRlICRtb2RhbDpNb2RhbFNlcnZpY2UpIHtcblxuICAgICAgICAgICAgdG9kb1NlcnZpY2UubGlzdCgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHRvZG9zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9kb3MgPSB0b2RvcztcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5jb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyBhZGROZXcoKSB7XG4gICAgICAgICAgICB0aGlzLiRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcIkFkZE5ld0NvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwiYWRkTmV3Q3RybFwiLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi90b2Rvcy9hZGRuZXcuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGJhY2tkcm9wOiBcInN0YXRpY1wiIC8vIHByZXZlbnRzIGNsaWNrYXdheSBmcm9tIGNsb3NpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9kb3NNb2R1bGUuY29udHJvbGxlcihcIkxpc3RDb250cm9sbGVyXCIsIExpc3RDb250cm9sbGVyKTtcblxuXG5cbn0iLCIvLy9yZWZlcmVuY2UgcGF0aD1cIm1vZHVsZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBUb0RvcyB7XG5cbiAgICBleHBvcnQgY2xhc3MgVG9Eb1NlcnZpY2Uge1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgJGh0dHA6IGFuZ3VsYXIuSUh0dHBTZXJ2aWNlKSB7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBsaXN0KCkge1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaHR0cC5nZXQ8VG9Eb1tdPihcIi9hcGkvdG9kb3NcIikuXG4gICAgICAgICAgICAgICAgdGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgYWRkKHRvZG86IFRvRG8pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRodHRwLnBvc3QoXCIvYXBpL3RvZG9zXCIsIHRvZG8pXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmRhdGEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b2Rvc01vZHVsZS5zZXJ2aWNlKFwidG9kb1NlcnZpY2VcIiwgVG9Eb1NlcnZpY2UpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9