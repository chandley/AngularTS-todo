var ToDos;!function(o){var t=["ui.router","todos.root","todos.main","todos.filters"];o.appModule=angular.module("todos",t),o.appModule.config(["$stateProvider","$urlRouterProvider",function(o,t){o.state({name:"root",url:"/",templateUrl:"root/root.html",controller:"RootController",controllerAs:"rootCtrl"}),t.otherwise("/")}])}(ToDos||(ToDos={}));var ToDos;!function(o){o.filterModule=angular.module("todos.filters",[])}(ToDos||(ToDos={}));var ToDos;!function(o){function t(o){if("string"!=typeof o)return o;var t=moment(o);return t.isValid()?t.format("DD MM YYYY"):o}o.filterModule.filter("moment",function(){return t})}(ToDos||(ToDos={}));var ToDos;!function(o){o.rootModule=angular.module("todos.root",[])}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(){this.messages=["Welcome","New version is out"],this.showMessages=!0}return o.prototype.toggleMessages=function(){this.showMessages=!this.showMessages},o}();o.rootModule.controller("RootController",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=["ui.router","ui.bootstrap"];o.todosModule=angular.module("todos.main",t),o.todosModule.config(["$stateProvider",function(o){o.state({name:"root.todos",url:"todos",templateUrl:"/todos/list.html",controller:"ListController",controllerAs:"listCtrl"})}])}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o,t){this.todoService=o,this.$modalInstance=t}return o.$inject=["todoService","$modalInstance"],o.prototype.save=function(){var o=this,t={id:Date.now().toString(),text:this.text,created:moment().toISOString()};this.todoService.add(t).then(function(){o.$modalInstance.close()})},o}();o.todosModule.controller("AddNewController",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o,t,e){this.todoService=o,this.$window=t,this.$modal=e,this.load()}return o.$inject=["todoService","$window","$modal"],o.prototype.load=function(){var o=this;this.todoService.list().then(function(t){o.todos=t})["catch"](function(t){o.$window.console.log(t)})},o.prototype.addNew=function(){var o=this;this.$modal.open({controller:"AddNewController",controllerAs:"addNewCtrl",templateUrl:"/todos/addnew.html",backdrop:"static"}).result.then(function(){o.load()})},o}();o.todosModule.controller("ListController",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o){this.$http=o}return o.$inject=["$http"],o.prototype.list=function(){return this.$http.get("/api/todos").then(function(o){return o.data})},o.prototype.add=function(o){return this.$http.post("/api/todos",o).then(function(o){return o.data})},o}();o.ToDoService=t,o.todosModule.service("todoService",t)}(ToDos||(ToDos={}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyIsImZpbHRlcnMvbW9kdWxlLnRzIiwiZmlsdGVycy9tb21lbnRGaWx0ZXIudHMiLCJyb290L21vZHVsZS50cyIsInJvb3QvUm9vdENvbnRyb2xsZXIudHMiLCJ0b2Rvcy9tb2R1bGUudHMiLCJ0b2Rvcy9BZGROZXdDb250cm9sbGVyLnRzIiwiYXBwLmpzIiwidG9kb3MvTGlzdENvbnRyb2xsZXIudHMiLCJ0b2Rvcy9Ub0RvU2VydmljZS50cyJdLCJuYW1lcyI6WyJUb0RvcyIsIlRvRG9zLm1vbWVudEZpbHRlciIsIlRvRG9zLlJvb3RDb250cm9sbGVyIiwiVG9Eb3MuUm9vdENvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJUb0Rvcy5Sb290Q29udHJvbGxlci50b2dnbGVNZXNzYWdlcyIsIlRvRG9zLkFkZE5ld0NvbnRyb2xsZXIiLCJUb0Rvcy5BZGROZXdDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwiQWRkTmV3Q29udHJvbGxlciIsIiRpbmplY3QiLCJUb0Rvcy5BZGROZXdDb250cm9sbGVyLnNhdmUiLCJUb0Rvcy5MaXN0Q29udHJvbGxlciIsIlRvRG9zLkxpc3RDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwiTGlzdENvbnRyb2xsZXIiLCJUb0Rvcy5MaXN0Q29udHJvbGxlci5sb2FkIiwiVG9Eb3MuTGlzdENvbnRyb2xsZXIuYWRkTmV3IiwiVG9Eb3MuVG9Eb1NlcnZpY2UiLCJUb0Rvcy5Ub0RvU2VydmljZS5jb25zdHJ1Y3RvciIsIlRvRG9TZXJ2aWNlIiwiVG9Eb3MuVG9Eb1NlcnZpY2UubGlzdCIsIlRvRG9zLlRvRG9TZXJ2aWNlLmFkZCJdLCJtYXBwaW5ncyI6IkFBSUEsR0FBVUEsUUFBVixTQUFVQSxHQUlOQSxHQUFJQSxJQUNBQSxZQUNBQSxhQUNBQSxhQUNBQSxnQkFFT0EsR0FBQUEsVUFBWUEsUUFBUUEsT0FBT0EsUUFBU0EsR0FFL0NBLEVBQUFBLFVBQVVBLFFBQUFBLGlCQUFBQSxxQkFDTkEsU0FBQ0EsRUFDREEsR0FFQUEsRUFDS0Es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WVQsU0FBVyxTRTNKaEJPLEVBQUFBLFVBQUFBLEtBQVBBLFdBRUlHLE1BQU9BLE1BQUtBLE1BQU1BLElBQVlBLGNBQzFCQSxLQUFLQSxTQUFDQSxHQUNGQSxNQUFPQSxHQUFTQSxRQUlyQkgsRUFBQUEsVUFBQUEsSUFBUEEsU0FBV0EsR0FDUEksTUFBT0EsTUFBS0EsTUFBTUEsS0FBS0EsYUFBY0EsR0FDcENBLEtBQUtBLFNBQUNBLEdBQWFBLE1BQUFBLEdBQVNBLFFBRXJDSixJQWxCYWYsR0FBQUEsWUFBV0EsRUFvQnhCQSxFQUFBQSxZQUFZQSxRQUFRQSxjQUFlQSxJQXRCN0JBLFFBQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBjaHJpc2hhIG9uIDAzLzA5LzE1LlxuICovXG5cbm5hbWVzcGFjZSBUb0RvcyB7XG5cbiAgICBleHBvcnQgdHlwZSBNb2RhbFNlcnZpY2UgPSBhbmd1bGFyLnVpLmJvb3RzdHJhcC5JTW9kYWxTZXJ2aWNlO1xuXG4gICAgdmFyIGRlcHMgPSBbXG4gICAgICAgIFwidWkucm91dGVyXCIsXG4gICAgICAgIFwidG9kb3Mucm9vdFwiLFxuICAgICAgICBcInRvZG9zLm1haW5cIixcbiAgICAgICAgXCJ0b2Rvcy5maWx0ZXJzXCJcbiAgICBdXG4gICAgZXhwb3J0IHZhciBhcHBNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZShcInRvZG9zXCIsIGRlcHMpO1xuXG4gICAgYXBwTW9kdWxlLmNvbmZpZyhcbiAgICAgICAgKCRzdGF0ZVByb3ZpZGVyOiBhbmd1bGFyLnVpLklTdGF0ZVByb3ZpZGVyLFxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXI6IGFuZ3VsYXIudWkuSVVybFJvdXRlclByb3ZpZGVyKSA9PiB7XG5cbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSh7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJyb290XCIsXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9cIixcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJyb290L3Jvb3QuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiUm9vdENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwicm9vdEN0cmxcIlxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XG5cbiAgICB9KVxuXG59XG4iLCJuYW1lc3BhY2UgVG9Eb3Mge1xuXG4gIGV4cG9ydCB2YXIgZmlsdGVyTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJ0b2Rvcy5maWx0ZXJzXCIsIFtdKVxuXG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwibW9kdWxlLnRzXCIgLz5cblxubmFtZXNwYWNlIFRvRG9zIHtcblxuICAgIGZ1bmN0aW9uIG1vbWVudEZpbHRlcih2YWw6IGFueSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIHZhbDtcblxuICAgICAgICB2YXIgbSA9IG1vbWVudCh2YWwpO1xuXG4gICAgICAgIGlmKCFtLmlzVmFsaWQoKSkgcmV0dXJuIHZhbDtcblxuICAgICAgICByZXR1cm4gbS5mb3JtYXQoXCJERCBNTSBZWVlZXCIpO1xuXG4gICAgfVxuXG4gICAgZmlsdGVyTW9kdWxlLmZpbHRlcihcIm1vbWVudFwiLCAoKSA9PiBtb21lbnRGaWx0ZXIpO1xuXG59XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgY2hyaXNoYSBvbiAwMy8wOS8xNS5cbiAqL1xuXG5uYW1lc3BhY2UgVG9Eb3Mge1xuXG4gICAgZXhwb3J0IHZhciByb290TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJ0b2Rvcy5yb290XCIsIFtdKTtcblxufSIsIi8qKlxuICogQ3JlYXRlZCBieSBjaHJpc2hhIG9uIDAzLzA5LzE1LlxuICovXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJtb2R1bGUudHNcIiAvPlxubmFtZXNwYWNlIFRvRG9zIHtcblxuICAgIGNsYXNzIFJvb3RDb250cm9sbGVyIHtcbiAgICAgICAgcHVibGljIG1lc3NhZ2VzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgIFwiV2VsY29tZVwiLFxuICAgICAgICAgICAgXCJOZXcgdmVyc2lvbiBpcyBvdXRcIlxuICAgICAgICBdO1xuXG4gICAgICAgIHB1YmxpYyBzaG93TWVzc2FnZXMgPSB0cnVlO1xuICAgICAgICBwdWJsaWMgdG9nZ2xlTWVzc2FnZXMoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dNZXNzYWdlcyA9ICF0aGlzLnNob3dNZXNzYWdlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJvb3RNb2R1bGUuY29udHJvbGxlcihcIlJvb3RDb250cm9sbGVyXCIsIFJvb3RDb250cm9sbGVyKVxufVxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGNocmlzaGEgb24gMDMvMDkvMTUuXG4gKi9cblxubmFtZXNwYWNlIFRvRG9zIHtcblxuICAgIHZhciBkZXBzID0gW1xuICAgICAgICBcInVpLnJvdXRlclwiLFxuICAgICAgICBcInVpLmJvb3RzdHJhcFwiXG4gICAgXVxuXG4gICAgZXhwb3J0IHZhciB0b2Rvc01vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKFwidG9kb3MubWFpblwiLCBkZXBzKTtcblxuICAgIHRvZG9zTW9kdWxlLmNvbmZpZygoJHN0YXRlUHJvdmlkZXI6IGFuZ3VsYXIudWkuSVN0YXRlUHJvdmlkZXIpID0+IHtcblxuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSh7XG4gICAgICAgICAgICBuYW1lOiBcInJvb3QudG9kb3NcIixcbiAgICAgICAgICAgIHVybDogXCJ0b2Rvc1wiLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiL3RvZG9zL2xpc3QuaHRtbFwiLFxuICAgICAgICAgICAgY29udHJvbGxlcjogXCJMaXN0Q29udHJvbGxlclwiLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImxpc3RDdHJsXCJcbiAgICAgICAgfSk7XG4gICAgfSlcblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1vZHVsZS50c1wiIC8+XG5uYW1lc3BhY2UgVG9Eb3Mge1xuICAgIGNsYXNzIEFkZE5ld0NvbnRyb2xsZXIge1xuICAgICAgICBwdWJsaWMgdGV4dDogc3RyaW5nO1xuICAgICAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRvZG9TZXJ2aWNlOiBUb0RvU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSAkbW9kYWxJbnN0YW5jZTogYW5ndWxhci51aS5ib290c3RyYXAuSU1vZGFsU2VydmljZUluc3RhbmNlKSB7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNhdmUoKSB7XG4gICAgICAgICAgICB2YXIgdG9kbyA9IHtcbiAgICAgICAgICAgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dCxcbiAgICAgICAgICAgICAgICBjcmVhdGVkOiBtb21lbnQoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50b2RvU2VydmljZS5hZGQodG9kbylcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJG1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b2Rvc01vZHVsZS5jb250cm9sbGVyKFwiQWRkTmV3Q29udHJvbGxlclwiLCBBZGROZXdDb250cm9sbGVyKTtcbn1cbiIsIi8qKlxuICogQ3JlYXRlZCBieSBjaHJpc2hhIG9uIDAzLzA5LzE1LlxuICovXG52YXIgVG9Eb3M7XG4oZnVuY3Rpb24gKFRvRG9zKSB7XG4gICAgdmFyIGRlcHMgPSBbXG4gICAgICAgIFwidWkucm91dGVyXCIsXG4gICAgICAgIFwidG9kb3Mucm9vdFwiLFxuICAgICAgICBcInRvZG9zLm1haW5cIixcbiAgICAgICAgXCJ0b2Rvcy5maWx0ZXJzXCJcbiAgICBdO1xuICAgIFRvRG9zLmFwcE1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKFwidG9kb3NcIiwgZGVwcyk7XG4gICAgVG9Eb3MuYXBwTW9kdWxlLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKHtcbiAgICAgICAgICAgIG5hbWU6IFwicm9vdFwiLFxuICAgICAgICAgICAgdXJsOiBcIi9cIixcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInJvb3Qvcm9vdC5odG1sXCIsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBcIlJvb3RDb250cm9sbGVyXCIsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6IFwicm9vdEN0cmxcIlxuICAgICAgICB9KTtcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XG4gICAgfSk7XG59KShUb0RvcyB8fCAoVG9Eb3MgPSB7fSkpO1xuXG52YXIgVG9Eb3M7XG4oZnVuY3Rpb24gKFRvRG9zKSB7XG4gICAgVG9Eb3MuZmlsdGVyTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJ0b2Rvcy5maWx0ZXJzXCIsIFtdKTtcbn0pKFRvRG9zIHx8IChUb0RvcyA9IHt9KSk7XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJtb2R1bGUudHNcIiAvPlxudmFyIFRvRG9zO1xuKGZ1bmN0aW9uIChUb0Rvcykge1xuICAgIGZ1bmN0aW9uIG1vbWVudEZpbHRlcih2YWwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB2YXIgbSA9IG1vbWVudCh2YWwpO1xuICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKVxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgcmV0dXJuIG0uZm9ybWF0KFwiREQgTU0gWVlZWVwiKTtcbiAgICB9XG4gICAgVG9Eb3MuZmlsdGVyTW9kdWxlLmZpbHRlcihcIm1vbWVudFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiBtb21lbnRGaWx0ZXI7IH0pO1xufSkoVG9Eb3MgfHwgKFRvRG9zID0ge30pKTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IGNocmlzaGEgb24gMDMvMDkvMTUuXG4gKi9cbnZhciBUb0RvcztcbihmdW5jdGlvbiAoVG9Eb3MpIHtcbiAgICBUb0Rvcy5yb290TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJ0b2Rvcy5yb290XCIsIFtdKTtcbn0pKFRvRG9zIHx8IChUb0RvcyA9IHt9KSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSBjaHJpc2hhIG9uIDAzLzA5LzE1LlxuICovXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwibW9kdWxlLnRzXCIgLz5cbnZhciBUb0RvcztcbihmdW5jdGlvbiAoVG9Eb3MpIHtcbiAgICB2YXIgUm9vdENvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBSb290Q29udHJvbGxlcigpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZXMgPSBbXG4gICAgICAgICAgICAgICAgXCJXZWxjb21lXCIsXG4gICAgICAgICAgICAgICAgXCJOZXcgdmVyc2lvbiBpcyBvdXRcIlxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHRoaXMuc2hvd01lc3NhZ2VzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBSb290Q29udHJvbGxlci5wcm90b3R5cGUudG9nZ2xlTWVzc2FnZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dNZXNzYWdlcyA9ICF0aGlzLnNob3dNZXNzYWdlcztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFJvb3RDb250cm9sbGVyO1xuICAgIH0pKCk7XG4gICAgVG9Eb3Mucm9vdE1vZHVsZS5jb250cm9sbGVyKFwiUm9vdENvbnRyb2xsZXJcIiwgUm9vdENvbnRyb2xsZXIpO1xufSkoVG9Eb3MgfHwgKFRvRG9zID0ge30pKTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IGNocmlzaGEgb24gMDMvMDkvMTUuXG4gKi9cbnZhciBUb0RvcztcbihmdW5jdGlvbiAoVG9Eb3MpIHtcbiAgICB2YXIgZGVwcyA9IFtcbiAgICAgICAgXCJ1aS5yb3V0ZXJcIixcbiAgICAgICAgXCJ1aS5ib290c3RyYXBcIlxuICAgIF07XG4gICAgVG9Eb3MudG9kb3NNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZShcInRvZG9zLm1haW5cIiwgZGVwcyk7XG4gICAgVG9Eb3MudG9kb3NNb2R1bGUuY29uZmlnKGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSh7XG4gICAgICAgICAgICBuYW1lOiBcInJvb3QudG9kb3NcIixcbiAgICAgICAgICAgIHVybDogXCJ0b2Rvc1wiLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiL3RvZG9zL2xpc3QuaHRtbFwiLFxuICAgICAgICAgICAgY29udHJvbGxlcjogXCJMaXN0Q29udHJvbGxlclwiLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImxpc3RDdHJsXCJcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KShUb0RvcyB8fCAoVG9Eb3MgPSB7fSkpO1xuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwibW9kdWxlLnRzXCIgLz5cbnZhciBUb0RvcztcbihmdW5jdGlvbiAoVG9Eb3MpIHtcbiAgICB2YXIgQWRkTmV3Q29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEFkZE5ld0NvbnRyb2xsZXIodG9kb1NlcnZpY2UsICRtb2RhbEluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnRvZG9TZXJ2aWNlID0gdG9kb1NlcnZpY2U7XG4gICAgICAgICAgICB0aGlzLiRtb2RhbEluc3RhbmNlID0gJG1vZGFsSW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgQWRkTmV3Q29udHJvbGxlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgdG9kbyA9IHtcbiAgICAgICAgICAgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dCxcbiAgICAgICAgICAgICAgICBjcmVhdGVkOiBtb21lbnQoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50b2RvU2VydmljZS5hZGQodG9kbylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuJG1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQWRkTmV3Q29udHJvbGxlcjtcbiAgICB9KSgpO1xuICAgIFRvRG9zLnRvZG9zTW9kdWxlLmNvbnRyb2xsZXIoXCJBZGROZXdDb250cm9sbGVyXCIsIEFkZE5ld0NvbnRyb2xsZXIpO1xufSkoVG9Eb3MgfHwgKFRvRG9zID0ge30pKTtcblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1vZHVsZS50c1wiIC8+XG52YXIgVG9Eb3M7XG4oZnVuY3Rpb24gKFRvRG9zKSB7XG4gICAgdmFyIExpc3RDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gTGlzdENvbnRyb2xsZXIodG9kb1NlcnZpY2UsICR3aW5kb3csICRtb2RhbCkge1xuICAgICAgICAgICAgdGhpcy50b2RvU2VydmljZSA9IHRvZG9TZXJ2aWNlO1xuICAgICAgICAgICAgdGhpcy4kd2luZG93ID0gJHdpbmRvdztcbiAgICAgICAgICAgIHRoaXMuJG1vZGFsID0gJG1vZGFsO1xuICAgICAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgICAgTGlzdENvbnRyb2xsZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy50b2RvU2VydmljZS5saXN0KClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodG9kb3MpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy50b2RvcyA9IHRvZG9zO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuJHdpbmRvdy5jb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgTGlzdENvbnRyb2xsZXIucHJvdG90eXBlLmFkZE5ldyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLiRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcIkFkZE5ld0NvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwiYWRkTmV3Q3RybFwiLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi90b2Rvcy9hZGRuZXcuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGJhY2tkcm9wOiBcInN0YXRpY1wiIC8vIHByZXZlbnRzIGNsaWNrYXdheSBmcm9tIGNsb3NpbmdcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2FkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIExpc3RDb250cm9sbGVyO1xuICAgIH0pKCk7XG4gICAgVG9Eb3MudG9kb3NNb2R1bGUuY29udHJvbGxlcihcIkxpc3RDb250cm9sbGVyXCIsIExpc3RDb250cm9sbGVyKTtcbn0pKFRvRG9zIHx8IChUb0RvcyA9IHt9KSk7XG5cbi8vL3JlZmVyZW5jZSBwYXRoPVwibW9kdWxlLnRzXCIgLz5cbnZhciBUb0RvcztcbihmdW5jdGlvbiAoVG9Eb3MpIHtcbiAgICB2YXIgVG9Eb1NlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBUb0RvU2VydmljZSgkaHR0cCkge1xuICAgICAgICAgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICAgICAgICB9XG4gICAgICAgIFRvRG9TZXJ2aWNlLnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGh0dHAuZ2V0KFwiL2FwaS90b2Rvc1wiKS5cbiAgICAgICAgICAgICAgICB0aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFRvRG9TZXJ2aWNlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodG9kbykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGh0dHAucG9zdChcIi9hcGkvdG9kb3NcIiwgdG9kbylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLmRhdGE7IH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVG9Eb1NlcnZpY2U7XG4gICAgfSkoKTtcbiAgICBUb0Rvcy5Ub0RvU2VydmljZSA9IFRvRG9TZXJ2aWNlO1xuICAgIFRvRG9zLnRvZG9zTW9kdWxlLnNlcnZpY2UoXCJ0b2RvU2VydmljZVwiLCBUb0RvU2VydmljZSk7XG59KShUb0RvcyB8fCAoVG9Eb3MgPSB7fSkpO1xuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIm1vZHVsZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBUb0RvcyB7XG5cbiAgICBpbnRlcmZhY2UgVG9EbyB7XG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgdGFnczogc3RyaW5nW107IC8vIGFjdHVhbGwgZGF0ZXNcbiAgICAgICAgZHVlOiBzdHJpbmc7IC8vIGFjdHVhbGwgZGF0ZVxuICAgICAgICBkb25lOiBzdHJpbmc7IC8vIGFjdHVhbGwgZGF0ZVxuXG4gICAgfVxuXG4gICAgY2xhc3MgTGlzdENvbnRyb2xsZXIge1xuICAgICAgICBwdWJsaWMgdG9kb3M6VG9Eb1tdO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdG9kb1NlcnZpY2U6VG9Eb1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIHByaXZhdGUgJHdpbmRvdzphbmd1bGFyLklXaW5kb3dTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICBwcml2YXRlICRtb2RhbDpNb2RhbFNlcnZpY2UpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZCgpO1xuICAgICAgICB9XG5cblxuICAgICAgICBwcml2YXRlXG4gICAgICAgICAgICBsb2FkKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZG9TZXJ2aWNlLmxpc3QoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigodG9kb3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9kb3MgPSB0b2RvcztcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kd2luZG93LmNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBhZGROZXcoKSB7XG4gICAgICAgICAgICB0aGlzLiRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcIkFkZE5ld0NvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwiYWRkTmV3Q3RybFwiLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi90b2Rvcy9hZGRuZXcuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGJhY2tkcm9wOiBcInN0YXRpY1wiIC8vIHByZXZlbnRzIGNsaWNrYXdheSBmcm9tIGNsb3NpbmdcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkKCk7XG5cblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9kb3NNb2R1bGUuY29udHJvbGxlcihcIkxpc3RDb250cm9sbGVyXCIsIExpc3RDb250cm9sbGVyKTtcblxuXG5cbn0iLCIvLy9yZWZlcmVuY2UgcGF0aD1cIm1vZHVsZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBUb0RvcyB7XG5cbiAgICBleHBvcnQgY2xhc3MgVG9Eb1NlcnZpY2Uge1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgJGh0dHA6IGFuZ3VsYXIuSUh0dHBTZXJ2aWNlKSB7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBsaXN0KCkge1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaHR0cC5nZXQ8VG9Eb1tdPihcIi9hcGkvdG9kb3NcIikuXG4gICAgICAgICAgICAgICAgdGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgYWRkKHRvZG86IFRvRG8pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRodHRwLnBvc3QoXCIvYXBpL3RvZG9zXCIsIHRvZG8pXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmRhdGEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b2Rvc01vZHVsZS5zZXJ2aWNlKFwidG9kb1NlcnZpY2VcIiwgVG9Eb1NlcnZpY2UpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9