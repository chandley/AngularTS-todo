var ToDos;!function(o){var t=["ui.router","todos.root","todos.main","todos.filters"];o.appModule=angular.module("todos",t),o.appModule.config(["$stateProvider","$urlRouterProvider",function(o,t){o.state({name:"root",url:"/",templateUrl:"root/root.html",controller:"RootController",controllerAs:"rootCtrl"}),t.otherwise("/")}])}(ToDos||(ToDos={}));var ToDos;!function(o){o.directivesModule=angular.module("todos.directives",[])}(ToDos||(ToDos={}));var ToDos;!function(o){function t(){return{restrict:"A",require:"ngModel",link:e}}function e(o,t,e,r){r.$parsers.push(function(o){return moment(o)})}o.directivesModule.directive("momentInput",t)}(ToDos||(ToDos={}));var ToDos;!function(o){o.filterModule=angular.module("todos.filters",[])}(ToDos||(ToDos={}));var ToDos;!function(o){function t(o,t){if("string"!=typeof o)return o;var e=moment(o);return e.isValid()?e.format(t||"DD MM YYYY"):o}o.filterModule.filter("moment",function(){return t})}(ToDos||(ToDos={}));var ToDos;!function(o){o.rootModule=angular.module("todos.root",[])}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o){this.$state=o,this.messages=["Welcome","New version is out"],this.showMessages=!0}return o.$inject=["$state"],o.prototype.toggleMessages=function(){this.showMessages=!this.showMessages},o.prototype.stateIs=function(o){return this.$state.is(o)},o}();o.rootModule.controller("RootController",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=["ngMessages","ui.router","ui.bootstrap","todos.filters","todos.directives"];o.todosModule=angular.module("todos.main",t),o.todosModule.config(["$stateProvider",function(o){o.state({name:"root.todos",url:"todos",templateUrl:"/todos/list.html",controller:"ListController",controllerAs:"listCtrl"}).state({name:"root.todos.item",url:"/:id",templateUrl:"/todos/item.html",controller:"ItemController",controllerAs:"itemCtrl"})}])}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o,t){this.todoService=o,this.$modalInstance=t}return o.$inject=["todoService","$modalInstance"],o.prototype.save=function(){var o=this,t={id:Date.now().toString(),text:this.text,created:moment().toISOString()};this.todoService.add(t).then(function(){o.$modalInstance.close()})},o}();o.todosModule.controller("AddNewController",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o,t,e){this.todoService=o,this.$window=t,this.$modal=e,this.load()}return o.$inject=["todoService","$window","$modal"],o.prototype.load=function(){var o=this;this.todoService.list().then(function(t){o.todos=t})["catch"](function(t){o.$window.console.log(t)})},o.prototype.addNew=function(){var o=this;this.$modal.open({controller:"AddNewController",controllerAs:"addNewCtrl",templateUrl:"/todos/addnew.html",backdrop:"static"}).result.then(function(){o.load()})},o}();o.todosModule.controller("ListController",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o){this.$http=o}return o.$inject=["$http"],o.prototype.list=function(){return this.$http.get("/api/todos",{cache:!1}).then(function(o){return o.data})},o.prototype.add=function(o){return this.$http.post("/api/todos",o).then(function(o){return o.data})},o.prototype.get=function(o){return this.$http.get("/api/todos/"+o).then(function(o){return o.data})},o}();o.ToDoService=t,o.todosModule.service("todoService",t)}(ToDos||(ToDos={}));var ToDos;!function(o){var t=function(){function o(o,t){var e=this;t.get(o.id).then(function(o){e.todo=o})}return o.$inject=["$stateParams","todoService"],o.prototype.save=function(){this.todo.due=moment(this.todo.due).toISOString()},o}();o.todosModule.controller("ItemController",t)}(ToDos||(ToDos={}));
//# sourceMappingURL=data:application/json;base64,